{"name":"Gploy","tagline":"Nailing the deployment to FTP and SFTP using git","body":"**GPLOY** is a tool made in **node.js** that helps you and your team to deploy your website to FTP and SFTP without having to leave the comfort of your Terminal.  \r\nIt uses **git** to upload only the files that were modified since the last deploy – **HOT STUFF**.\r\n\r\n## Install\r\n```\r\nnpm install gploy -g\r\n```\r\n\r\n## Help\r\n```\r\ngploy --help\r\n```\r\n\r\n## Commands\r\n### gploy\r\nWill deploy the first environment that you have on your `gploy.yaml`\r\n\r\n### gploy install\r\nWill install the `gploy.yaml` file and set up a `post-commit` script on your `.git/hooks` folder so you can _GPLOY_ from your commit message as well.\r\n\r\n### gploy …rest\r\nAnything else after the `gploy` command will be used as an environment, like this:  \r\n  \r\n```\r\ngploy dev stage production\r\n```  \r\nIn this case _GPLOY_ will expect to find **dev**, **stage** and **production** configs on your `gploy.yaml` file.\r\n\r\n## Basic example\r\nIf you only have one server, just name whatever you want and run `gploy`.   \r\n\r\n```\r\nawesome:\r\n    host: \"ftp.myserver.com\"\r\n    user: \"user\"\r\n    pass: \"password\"\r\n    path:\r\n        local: \"deploy/\"\r\n        remote: \"public_html/\"\r\n```\r\n\r\nDeploying on the command line:\r\n\r\n```\r\ngploy\r\n```\r\n\r\nYou can also set the environment that you want to upload:  \r\n  \r\n```\r\ngploy awesome\r\n```\r\n\r\n## Attributes of the gploy.yaml\r\n### scheme\r\n* Type: `String`  \r\n* Default: `ftp`  \r\n\r\n_GPLOY_ has two available schemes: **ftp** and **sftp**. You must provide this information, because we don't like to play guessing games.\r\n\r\n### host\r\n* Type: `String`  \r\n* Default: `none`\r\n\r\n### port\r\n* Type: `Number`  \r\n* Default: `21` when ftp and `22` when sftp\r\n\r\nThe port that your hosting server is using. Note that the default value is different depending on **scheme** that you are using.\r\n\r\n### user\r\n* Type: `String`  \r\n* Default: `none`\r\n\r\n### pass\r\n* Type: `String`  \r\n* Default: `none`\r\n\r\n### revision\r\n* Type: `String`  \r\n* Default: `.rev`  \r\n\r\nTo check the different between your local files and what's on the server, we have to create a temporary file with the reference of the last commit you've uploaded. This parameter defines the name of this file.\r\n\r\n### slots\r\n* Type: `Number`  \r\n* Default: `1`  \r\n\r\nTo make the upload faster, you can create multiple connections to your server.\r\n\r\n### check\r\n* Type: `Boolean`  \r\n* Default: `false`  \r\n\r\nIf you set this parameter to `true`, you will be prompted to confirm the list of files before the actual action.\r\n\r\n### branch\r\n* Type: `String` or `Array`  \r\n* Default: `none`  \r\n\r\nYou can set a list of branches that are allowed to deploy to your server. This will also help you to avoid accidental uploads to different servers.  \r\nNote that you can also set a string (a single branch), rather than a list.\r\n\r\n### path.local\r\n* Type: `String`  \r\n* Default: `none`  \r\n\r\nThe local folder that you want to upload to the server. If you don't set anything, the entire folder of your project will be uploaded.\r\n\r\n### path.remote\r\n* Type: `String`  \r\n* Default: `none`    \r\n\r\nThe remote folder where your files will be uploaded. If you don't set anything, your files will be uploaded to the root of your server. We **highly recommend** that you set this!\r\n\r\n### exclude  \r\n* Type: `Array`  \r\n* Default: `none`    \r\n\r\nExclude files that are tracked by git, but that you don't want on your server. You can target individual files or use [glob](https://github.com/isaacs/minimatch) to target multiple files and file types.\r\n  \r\n* Individual files: `exclude: [\"gploy.yaml\", \"package.json\", \"path/to/file.js\"]`.\r\n* Using glob: `exclude: [\"*.yaml\", \"*.json\", \"path/**/*.js\", \"**/*.md\"]`.\r\n\r\n### include\r\n* Type: `Object`  \r\n* Default: `none`    \r\n\r\nThe **include** parameter is similar to the **exclude**. But instead of an array, it expects an object.  \r\nThe **key** of your object is what *GPLOY* is gonna search locally and the **value** of your object is the path of the remote server. Again you can also target individual files or multiple using [glob](https://github.com/isaacs/minimatch) on the key of your object.\r\n\r\n```\r\ninclude:\r\n    \"videos/kitty.mp4 videos/dog.mp4 videos/goat.mp4\": \"videos/\"\r\n    \"videos/*.mp4\": \"videos/\"\r\n    \"*.json *.yaml *.xml\": \"data/\"\r\n```\r\n_Note that you can set multiple patterns separated by a empty space on the key of your object_\r\n\r\n## Ignore include flag\r\nIf you are using the **include** parameter on your `gploy.yaml`, you will note that those files will always be uploaded to the server, no matter if they were modified or not (because they aren't necessarily tracked by git).  \r\nIn order to avoid re-uploading those files all the time, there's a tag called `--ignore-include` that you can set when calling _GPLOY_.  \r\n  \r\n```\r\ngploy stage --ignore-include\r\n```  \r\nOr using a shortcut:  \r\n  \r\n```\r\ngploy stage -i\r\n```\r\n\r\n\r\n## Multiple environments\r\nMost of the times we have to work on different environments (dev, stage, production…).  \r\nWith _GPLOY_ is really easy to make multiple deploys using a single command. All you need to do is create different configurations on your `gploy.yaml` file, like this:\r\n\r\n```\r\ndev:\r\n    host: \"dev.myserver.com\"\r\n    user: \"dev_user\"\r\n    pass: \"dev_password\"\r\n    path:\r\n        local: \"deploy/\"\r\n        remote: \"public_html/\"\r\n\r\nstage:\r\n    host: \"stage.myserver.com\"\r\n    user: \"stage_user\"\r\n    pass: \"stage_password\"\r\n    path:\r\n        local: \"deploy/\"\r\n        remote: \"public_html/\"\r\n\r\nproduction:\r\n    host: \"myserver.com\"\r\n    user: \"production_user\"\r\n    pass: \"production_password\"\r\n    path:\r\n        local: \"deploy/\"\r\n        remote: \"public_html/\"\r\n```\r\n\r\nDeploy to **stage** environment only:\r\n\r\n```\r\ngploy stage\r\n```\r\nOr if you want to upload to more than one environment:  \r\n  \r\n```\r\ngploy dev stage production\r\n```\r\n\r\n## Including and excluding files\r\nThis example will upload your local `deploy` folder to your remote `public_html` folder and:    \r\n\r\n* Will **include** all `.mp4` files inside your `videos` folder to a remote folder named `funny` on your server.\r\n* Will **include** all `json`, `yaml` and `xml` files at your cwd folder to a remote folder named `data`.\r\n* Will **exclude** all `yaml`, `json` from your `deploy` folder.\r\n* Will **exclude** all `js` files inside the folder `deploy/path`.\r\n* Will **exclude** all `md` files from your `deploy` folder.\r\n\r\n```\r\nawesome:\r\n    host: \"ftp.myserver.com\"\r\n    user: \"user\"\r\n    pass: \"password\"\r\n    path:\r\n        local: \"deploy/\"\r\n        remote: \"public_html/\"\r\n    exclude: [\"deploy/*.yaml\", \"deploy/*.json\", \"deploy/path/**/*.js\", \"deploy/**/*.md\"]\r\n    include:\r\n        \"videos/*.mp4\": \"funny/\"\r\n        \"*.json *.yaml *.xml\": \"data/\"\r\n            \r\n```","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}